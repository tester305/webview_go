name: Continuous Build

on:
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
      fail-fast: false

    runs-on: ${{ matrix.goos == 'windows' && 'windows-latest' || matrix.goos == 'darwin' && 'macos-latest' || 'ubuntu-latest' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      # Linux dependencies
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y build-essential pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev zip

      # macOS dependencies
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          xcode-select --install || true
          brew update
          brew install pkg-config gtk+3 zip
        shell: bash

      # Windows dependencies (MinGW winlibs)
      - name: Install MinGW (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://github.com/brechtsanders/winlibs_mingw/releases/download/15.2.0posix-13.0.0-ucrt-r2/winlibs-i686-posix-dwarf-gcc-15.2.0-mingw-w64ucrt-13.0.0-r2.zip -OutFile winlibs.zip
          Expand-Archive winlibs.zip -DestinationPath C:\mingw
          $env:PATH = "C:\mingw\winlibs-i686-posix-dwarf-gcc-15.2.0-mingw-w64ucrt-13.0.0-r2\bin;$env:PATH"
          $env:CC="gcc"
          $env:CXX="g++"

      # Build binary (Windows)
      - name: Build binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:GOOS = "windows"
          $env:GOARCH = "${{ matrix.goarch }}"
          go build -v -o "webview_go-windows-${{ matrix.goarch }}.exe"

      # Package binary (Windows)
      - name: Package binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          mkdir dist
          Compress-Archive -Path "webview_go-windows-${{ matrix.goarch }}.exe" -DestinationPath "dist/webview_go-windows-${{ matrix.goarch }}.zip"

      # Build binary (Linux/macOS)
      - name: Build binary (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o "webview_go-${{ matrix.goos }}-${{ matrix.goarch }}"

      # Package binaries into .zip (Linux/macOS)
      - name: Package binary into .zip (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p dist
          zip -j dist/webview_go-${{ matrix.goos }}-${{ matrix.goarch }}.zip webview_go-${{ matrix.goos }}-${{ matrix.goarch }}

      # Upload artifacts for Actions
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: webview_go-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built zips
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Create or Update Continuous Build Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: continuous
          name: "Continuous Build"
          body: "Latest cross-platform build of webview_go (auto-updated on push)."
          files: ./dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
